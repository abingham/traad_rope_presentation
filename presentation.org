#+STARTUP: showall
#+REVEAL_THEME: sixty_north
#+REVEAL_TITLE_SLIDE_TEMPLATE: <h2>Python Refactoring</h2><h2>with Rope and Traad</h2><p><p>Austin Bingham<p><p>Sixty North AS<p>
#+style:<style>  pre.src  {background-color: #222222;}</style>
#+style:<style>  .example {background-color: #FFFFCC;}</style>
#+OPTIONS: num:nil, toc:nil

* Hello!
[[file:images/intro.png]]

* What is Rope?
** A Python library for doing Python refactorings.
#+ATTR_HTML: :width 50%
[[file:images/ouroboros.jpg]]

** Rope has powerful IDE-oriented features
- Code completion
- Finding definitions and occurrences
- Organizing imports
- Looking up docstrings

* Elements of rope
[[file:images/fishermansknot.gif]]

** Project

   Represents the files and directories containing code that rope will manipulate.

   =Project= is the root object in rope

** Create a project

#+BEGIN_SRC python
  import rope.base.project
  project = rope.base.project.Project('project_dir')
#+END_SRC

** Walk project resources

#+BEGIN_SRC python
  def get_all_resources(proj):
      todo = ['']
      while todo:
          res_path = todo[0]
          todo = todo[1:]
          res = proj.get_resource(res_path)
          yield(res.path, res.is_folder())
  
          if res.is_folder():
              todo.extend((child.path for child in res.get_children()))
#+END_SRC

** Manage preferences

=prefs= is a dict-like container of settings and preferences.

#+BEGIN_SRC python
  for p in project.prefs.prefs:
      print(project.prefs.get(p))
#+END_SRC

#+ATTR_REVEAL: :frag t
=prefs= are stored in a file called =.ropeproject= at the project's root directory.

*** Project features
- Access to all *resources* in a directory
- Preferences system
- =Project.do()= applies changes to the project

** resources

The files and directories in the project.

#+BEGIN_SRC python
  server = project.get_resource('traad/server.py')
  print(server.name,
        server.path,
        server.is_folder())
  
  c1 = project.get_resource('').get_children()[0]
  print(c1.name,
        c1.path,
        c1.is_folder())
#+END_SRC

* Anatomy of a refactoring
[[file:images/anatomy.jpg]]

** Create the refactoring object

#+BEGIN_SRC python
  from rope.refactor.rename import Rename
  
  ren = Rename(project, 
               project.get_resource('traad/state.py'),
               offset=42)
#+END_SRC

#+ATTR_REVEAL: :frag t
This can fail if rope can't perform the refactoring
#+ATTR_REVEAL: :frag t
The refactoring is only *partially bound*

** Calculate actual changes

#+BEGIN_SRC python
changes = ren.get_changes('TacoCopter')
print(changes.description)
print(changes.get_changed_resources())
#+END_SRC

#+ATTR_REVEAL: :frag t
=changes= represents a *fully bound* change

** Execute the changes

#+BEGIN_SRC python
project.do(changes)
#+END_SRC

After this the changes are actually performed.

** history (undo/redo)
** cross-projects
** Hard to drive “manually”. 
Editors are good at providing the info it needs
** Refactorings are “staged”
- First you get a refactoring for a specific location
- This can be inspected, but it doesn’t fully specify the changes to be made
- Then you fully parameterize the refactoring, e.g. by providing a new name
- This gives you a “change”
- This change can them be performed.
** non-refactoring stuff
- findit
- codeassist
- validation

* What is traad? [2 min]
** HTTP server for driving rope
similar in spirit to e.g. nREPL for clojure and many other tools

* Why traad? [3 min.]
** Integrating a Python environment into an editor is a) difficult and b) unnecessary
** HTTP is (way) more than fast enough for this work.
** Much easier support for multiple Python versions

* Traad architecture [10 min.]
** Bottle.py powering the http
** Pykka for managing concurrency
** synchronous responses for “fast” stuff.
** state objects which get updated as the task proceeds.
** emacs 

* Demo [5 min.]
** Simple renaming
** Import cleanup
** History

* Links
 - http://rope.sourceforge.net/
 - http://github.com/abingham/traad

* Thanks! Questions?
[[file:images/SixtyNorth_logo.png]]
