#+STARTUP: showall
#+REVEAL_THEME: blood
#+REVEAL_TITLE_SLIDE_TEMPLATE: <h2>Python Refactoring</h2><h2>with Rope and Traad</h2><p><p>Austin Bingham<p><p>Sixty North AS<p>
#+REVEAL_EXTRA_CSS: ./reveal.js/css/theme/sixty_north_mixin.css
#+OPTIONS: num:nil, toc:nil

* Hello!
[[file:images/intro.png]]

* Python is everywhere!
file:images/mondrian_python.jpg

* What is Rope?
** A Python library for doing Python refactorings
#+ATTR_HTML: :width 50%
[[file:images/ouroboros.jpg]]

** Rope has powerful IDE-oriented features
- Code completion
- Finding definitions and occurrences
- Organizing imports
- Looking up docstrings

* Elements of rope
[[file:images/fishermansknot.gif]]

** Project

   Represents the files and directories containing code that rope will manipulate.

   =Project= is the root object in rope

** Create a project

#+BEGIN_SRC python
  from rope.base.project import Project
  project = Project('project_dir')
#+END_SRC

** resources

The files and directories in the project

#+BEGIN_SRC python
  server = project.get_resource('traad/server.py')
  print(server.name,
        server.path,
        server.is_folder())
  
  c1 = project.get_resource('').get_children()[0]
  print(c1.name,
        c1.path,
        c1.is_folder())
#+END_SRC


** Walk project resources

#+BEGIN_SRC python
  def get_all_resources(proj):
      todo = ['']
      while todo:
          res_path = todo[0]
          todo = todo[1:]
          res = proj.get_resource(res_path)
          yield(res.path, res.is_folder())
  
          if res.is_folder():
              todo.extend((child.path for child in res.get_children()))
#+END_SRC

~Project.get_resource(path)~ finds a resource at a relative path

~Resource.get_children()~ returns an iterable over children

** Manage preferences

=prefs= is a dict-like container of settings and preferences.

#+BEGIN_SRC python
  for p in project.prefs.prefs:
      print(project.prefs.get(p))
#+END_SRC

#+ATTR_REVEAL: :frag t
=prefs= are stored in a file called =.ropeproject/config.py= at the project's root directory.

* Anatomy of a refactoring
[[file:images/anatomy.jpg]]

** Create the refactoring object

#+BEGIN_SRC python
  from rope.refactor.rename import Rename
  
  ren = Rename(project, 
               project.get_resource('traad/state.py'),
               offset=42)
#+END_SRC

#+ATTR_REVEAL: :frag t
This can fail if rope can't perform the refactoring
#+ATTR_REVEAL: :frag t
The refactoring is only *partially bound*

** Calculate actual changes

#+BEGIN_SRC python
changes = ren.get_changes('TacoCopter')
print(changes.description)
print(changes.get_changed_resources())
#+END_SRC

#+ATTR_REVEAL: :frag t
=changes= represents a *fully bound* change

** Execute the changes

#+BEGIN_SRC python
project.do(changes)
#+END_SRC

After this the changes are actually performed.

** The full process

#+BEGIN_SRC python
  from rope.base.project import Project
  from rope.refactor.rename import Rename
  
  # Create the project
  proj = Project('.')
  
  # Create the partially-bound refactoring
  ren = Rename(project,
               project.get_resource('traad/state.py'),
               offset=42)
  
  # Calculate the changes for a fully-specified renaming
  change = ren.get_changes('TacoCopter')
  
  # Perform the changes
  project.do(changes())
#+END_SRC

* History

[[file:images/abe.png]]

** =history= object

=Project.history= manages the history of changes that have been made.

#+ATTR_REVEAL: :frag t
Also remembers what has been *undone* as well as change dependencies.

** Undoing changes

Undo the most recent changes
#+BEGIN_SRC python
project.history.undo()
#+END_SRC

Or select more distance changes to undo

#+BEGIN_SRC python
change = project.history.undo_list[3]
project.history.undo(change)
#+END_SRC

#+ATTR_REVEAL: :frag t
This will undo all dependent changes.

** Redoing changes

You can redo changes that you've previously undone.

#+BEGIN_SRC python
change = project.history.redo_list[-2]
project.history.redo(change)
#+END_SRC

* Multi-project refactoring

[[file:images/octopus.jpg]]

** The Multi-project refactoring class

First create a =MultiProjectRefactoring= instance.

#+BEGIN_SRC python
  from rope.refactor import multiproject
  
  mpr = multiproject.MultiProjectRefactoring(
      Rename, # type of refactoring to perform
      [other_project1, other_project2, other_project3])  
#+END_SRC

Then call that with your *main* project and the refactoring initializer arguments

#+BEGIN_SRC python
  ref = mpr(main_project, 
            some_resource,
            offset=1337)
#+END_SRC

*** Create and perform the change

#+BEGIN_SRC python
  # Remember that `ref` is a renaming operation
  changes = ref.get_all_changes(
      "EnterpriseProxyManagerImplementationFactoryFactory")
  
  multiproject.perform(changes)
#+END_SRC

* Non-refactoring tools

[[file:images/knife.jpg]]

* Not intended for "manual" operation

[[file:images/operation_game.jpg]]

* What is traad?

#+ATTR_REVEAL: :frag t
*tråd* - svært tynn snor av fibrer av silke, ull, el. f eks av metall

* What is traad?

/thread/

[[file:images/thread.png]]

** traad is...

An HTTP+JSON server for driving rope

[[file:images/traad highlevel.png]]

** traad is...

Various clients for driving the server

[[file:images/traad client highlevel.png]]

* Why traad?

[[file:images/jackiechan.jpg]]

** Simpler integration with editors

[[file:images/speaking computer.png]]

Every corner of the programming universe knows how to speak HTTP+JSON

** HTTP is (way) more than fast enough for this work

[[file:images/cronometro.png]]

The volume of data is low, and the response time only needs to be good enough for humans

** Support for multiple Python versions

[[file:images/multiple python versions.png]]

The client has zero depenencies on the version of Python that traad is using

** Proper level of abstraction

[[file:images/different ides.png]]

The problem domain of traad is Python refactoring, not Python integration with other languages.

* Traad architecture

**    

[[file:images/bottle_logo.png]]

Low-ceremony (sorta), powerful, and well-documented

** Pykka for managing concurrency

[[file:images/oscar.png]]

** Overall architecture

[[file:images/overall architecture.png]]

** Task state

#+BEGIN_SRC python
  {
      1: { 'status': 'pending',
           'description': 'Renaming FOO to BAR',
           'changed_resources': [. . .]},
      
      2: { 'status': 'failure'},
      
      3: { 'status': 'success',
           'calltip': 'uuid1(node=None, clock_seq=None)' }
  }
#+END_SRC

Simple mapping of task-ids to dicts

#+ATTR_REVEAL: :frag t
State is an /actor/ and thus threadsafe. Multiple asynchronous tasks
could be accessing it at any time.

** Asynchronous operations

[[file:images/async_op.png]]

** Synchronous operations

[[file:images/sync_op.png]]

** Asychronous vs. synchronous

#+ATTR_REVEAL: :frag t
*Asynchronous*  

#+ATTR_REVEAL: :frag t
- Rename          
- Extract         
- Organize imports

#+ATTR_REVEAL: :frag t
*Synchronous*

#+ATTR_REVEAL: :frag t
- Find definition
- Get history
- Calltip

** emacs 

The emacs lisp for renaming looks like this
#+BEGIN_SRC lisp
  ; Starts new traad server on the specified directory
  (traad-open "~/projects/roid_rage")
  
  ; Renames whatever is a the point (i.e. under the cursor)
  (traad-rename "RagingRoid")
#+END_SRC

And the HTTP message looks like this

#+BEGIN_SRC text
  POST /refactor/rename HTTP/1.1
  User-Agent: curl/7.30.0
  Host: 127.0.0.1:65172
  Accept: */*
  Accept-Encoding: deflate, gzip
  Content-Type: application/json
  Content-Length: 104
  
  {"name":"RagingRoid",
   "path":"\/Users\/sixtynorth\/projects\/roid_rage\/roid_rage\/roid.py",
   "offset":102}
#+END_SRC

* Demos
** Simple renaming
** Import cleanup
** History

* Links
 - Rope - http://rope.sourceforge.net/
 - Traad - http://github.com/abingham/traad
 - Pykka - http://www.pykka.org/
 - Bottle - http://bottlepy.org/
 - http://github.com/abingham/traad_rope_presentation

* Support rope and traad

file:images/uncle-sam-we-want-you.jpeg

The success of rope and traad depend on users and developers like you!

*  
    :PROPERTIES:
    :reveal_background: ./images/closer.png
    :reveal_background_trans: slide
    :END:

